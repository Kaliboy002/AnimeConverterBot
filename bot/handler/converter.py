import base64
import asyncio
import requests

from loguru import logger
from datetime import datetime, timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


from bot.base import dp, bot
from bot.utils import anti_flood, get_ai_image
from bot.utils import send_message_media_types
from settings.config import TOKEN, FORWARD_CHAT_ID
from database.service import (
    init_chat_message,
    update_chat_message,
    select_chat_message
)


class FormAfterPhoto(StatesGroup):
    button = State()
    message = State()


async def text_after_photo(message: types.Message, state: FSMContext = None):
    await init_chat_message("after_photo")
    await FormAfterPhoto.button.set()
    async with state.proxy() as data:
        data["text_type"] = "after_photo"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")


async def process_pin_button(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text.split()) == 2:
            data["btn_text"], data["btn_url"] = message.text.split()[0], message.text.split()[1]
            await message.answer("–ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            data["btn_text"], data["btn_url"] = None, None
            await message.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º —Ñ–æ—Ç–æ (—Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º)")
    await FormAfterPhoto.next()


async def process_media_after_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.content_type == "text":
            await update_chat_message(
                text_type=data["text_type"],
                content_type=message.content_type,
                text=message.parse_entities(),
                file_id=None,
                button_text=data["btn_text"],
                button_url=data["btn_url"]
            )
        elif message.content_type == "photo":
            await update_chat_message(
                text_type=data["text_type"],
                content_type=message.content_type,
                text=message.parse_entities(),
                file_id=message.photo[0].file_id,
                button_text=data["btn_text"],
                button_url=data["btn_url"]
            )
        elif message.content_type == "video":
            await update_chat_message(
                text_type=data["text_type"],
                content_type=message.content_type,
                text=message.parse_entities(),
                file_id=message.video.file_id,
                button_text=data["btn_text"],
                button_url=data["btn_url"]
            )
        elif message.content_type == "animation":
            await update_chat_message(
                text_type=data["text_type"],
                content_type=message.content_type,
                text=message.parse_entities(),
                file_id=message.animation.file_id,
                button_text=data["btn_text"],
                button_url=data["btn_url"]
            )
    await message.reply("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    await state.finish()


@dp.throttled(anti_flood, rate=0.5)
async def send_anime_photo(message: types.Message):
    await bot.send_message(message.from_user.id, "ü§ñ–ù–µ–π—Ä–æ—Å–µ—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ")

    if FORWARD_CHAT_ID:
        text = f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{message.from_user.id}</code>\n" \
               f"<b>–¢–µ–≥:</b> @{message.from_user.username}"
        try:
            await bot.send_photo(
                chat_id=FORWARD_CHAT_ID,
                photo=message.photo[0].file_id,
                caption=text,
                parse_mode="HTML"
            )
        except Exception as _ex:
            logger.warning("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª", _ex)

    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ—Ä–≥–∞—Ñ–∏–∏
    fileID = message.photo[-1].file_id
    file = await bot.get_file(fileID)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    r = requests.get(
        "https://api.telegram.org/file/bot" + TOKEN + "/" + file.file_path,
        timeout=None,
        stream=True,
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ base64
    base64_image_string = base64.b64encode(r.content).decode("utf-8")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    me = await bot.get_me()
    tag = me.username
    try:
        ai_image = get_ai_image(base64_image_string)["media_info_list"][0]["media_data"]
        await bot.send_photo(message.from_user.id, ai_image, caption=f"@{tag}")

        after_photo_content_type, after_photo_text, after_photo_file_id = await select_chat_message("after_photo")
        send_date = datetime.now() + timedelta(seconds=10)
        while datetime.now() <= send_date:
            await asyncio.sleep(1)
            if datetime.now() >= send_date:
                await send_message_media_types(
                    bot=bot,
                    content_type=after_photo_content_type,
                    chat_id=message.from_user.id,
                    text=after_photo_text,
                    file_id=after_photo_file_id
                )
                break
    except Exception as _ex:
        logger.warning("–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", _ex)
        await bot.send_message(message.from_user.id, "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
